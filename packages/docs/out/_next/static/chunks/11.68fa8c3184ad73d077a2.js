(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[11],{qn5M:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));var r=t("cxan"),a=t("HbGN"),o=t("ERkP"),l=t.n(o),i=t("ZVZ0"),b=(l.a.createElement,{});function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",null,"Editing Entries"),Object(i.b)("hr",null),Object(i.b)("p",null,"On this page, we'll cover how to edit entries with ",Object(i.b)("inlineCode",{parentName:"p"},"react-tinacms-contentful"),". There is also a list of ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#faqs"}),"Frequently Asked Questions (FAQs)"),"."),Object(i.b)("h2",null,"Editing A Single Entry"),Object(i.b)("p",null,"Editing a single entry can be done via the ",Object(i.b)("inlineCode",{parentName:"p"},"useContentfulEntryForm")," hook."),Object(i.b)("p",null,"Fetch an entry and pass it to ",Object(i.b)("inlineCode",{parentName:"p"},"useContentfulEntryForm"),", and you will receive a ",Object(i.b)("inlineCode",{parentName:"p"},"modifiedEntry")," and ",Object(i.b)("inlineCode",{parentName:"p"},"form")," object."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n    fields: [\n      { name: "fields.title", label: "Title", component: "text" }\n    ]\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && "Loading..."}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n')),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"name"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"modifiedEntry")),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"The entry data returned from the form, to re-render the page with draft form data")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"form")),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"A TinaCMS ",Object(i.b)("inlineCode",{parentName:"td"},"Form")," object to be used with ",Object(i.b)("inlineCode",{parentName:"td"},"usePlugin")," or ",Object(i.b)("inlineCode",{parentName:"td"},"InlineForm"))))),Object(i.b)("p",null,"You can also pass ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://tina.io/docs/plugins/forms/#form-configuration"}),Object(i.b)("inlineCode",{parentName:"a"},"FormOptions"))," to the hook to further customize the form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-diff"}),'export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n+   id: "page",\n    fields: [\n      { name: "fields.title", label: "Title", component: "text" }\n    ]\n+   onChange: (values) => console.log(values)\n+ });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && "Loading..."}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n')),Object(i.b)("p",null,"Finally, you can also create a custom form altogether if you need full control:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: "page",\n    fields: [\n      { name: "fields.title", label: "Title", component: "text" }\n    ],\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && "Loading..."}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n')),Object(i.b)("blockquote",null,Object(i.b)("h3",{parentName:"blockquote"},"Pro Tips"),Object(i.b)("p",{parentName:"blockquote"},"See the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://tina.io/docs/plugins/forms/"}),"TinaCMS form documentation for more info"),".\nSee the API documentation for ","[",Object(i.b)("inlineCode",{parentName:"p"},"useContentful"),"]"," and ","[",Object(i.b)("inlineCode",{parentName:"p"},"useContentfulEntry"),"]",".")),Object(i.b)("h2",null,"Editing Referenced Entries"),Object(i.b)("p",null,"You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting."),Object(i.b)("p",null,"This is done by passing ",Object(i.b)("inlineCode",{parentName:"p"},"references: true")," in the form's options."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-diff"}),'export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: "page",\n    fields: [\n      { name: "fields.title", label: "Title", component: "text" }\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n+   references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && "Loading..."}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n')),Object(i.b)("p",null,"This will then allow the form fields to edit the fields of references. For example, if we had a post content type:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"type PostEntry {\n  title: string\n  created: Date\n  edited: Date\n  author: AuthorEntry\n}\n\ntype AuthorEntry {\n  firstName: string\n  lastName: string\n  bio: string\n  photo: Asset\n}\n")),Object(i.b)("p",null,"We can edit the the author data by setting up form fields to access them:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-diff"}),'export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: "page",\n    fields: [\n      { name: "fields.title", label: "Title", component: "text" },\n      { name: "fields.author", label: "Author", component: "group", fields: [\n        { name: "fields.firstName", label: "First Name", component: "text" },\n        { name: "fields.lastName", label: "First Name", component: "text" },\n        { name: "fields.bio", label: "Bio", label: "Keep it short. 250 words or less", component: "textarea" },\n        { name: "fields.photo", label: "Photo", component: "image" }\n      ]}\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n    references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && "Loading..."}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n')),Object(i.b)("p",null,"If the entry being edited already has an author, then you'll be able to update that author, otherwise, it will create a new author."),Object(i.b)("h2",null,"FAQs"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"What happens on write?",Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},"That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\nHowever, if you're looking to update an entry and its children, then see ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#editing-nested-referenced-entries"}),"Editing Nested & Referenced Entries")))),Object(i.b)("li",{parentName:"ol"},"What happens to references?",Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},"See ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#editing-nested-referenced-entries"}),"Editing Nested & Referenced Entries"))))))}c.isMDXComponent=!0}}]);