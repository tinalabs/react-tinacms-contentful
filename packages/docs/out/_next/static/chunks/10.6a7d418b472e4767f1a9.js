(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[10],{"0/QA":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return i}));var r=t("cxan"),o=t("HbGN"),c=t("ERkP"),a=t.n(c),l=t("ZVZ0"),s=(a.a.createElement,{});function i(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Fetching Entries"),Object(l.b)("hr",null),Object(l.b)("p",null,"On this page, we'll cover how to fetch entries with ",Object(l.b)("inlineCode",{parentName:"p"},"react-tinacms-contentful"),"."),Object(l.b)("h2",null,"Fetching An Entry"),Object(l.b)("p",null,"You can fetch any entry in the space by ID."),Object(l.b)("h3",null,"Vanilla JS"),Object(l.b)("p",null,"To fetch an entry with Vanilla JS, use the ",Object(l.b)("inlineCode",{parentName:"p"},"cms.api")," object."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{}),'const cms = new TinaCMS(...)\n\ncms.api.contentful.getEntry("ENTRY_ID")\n  .then(entry => console.log(entry))\n')),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"To fetch only drafts, set ",Object(l.b)("inlineCode",{parentName:"em"},"preview")," to true in the ","[options]","(TODO: API DOCS).")),Object(l.b)("h3",null,"React"),Object(l.b)("p",null,"To fetch an entry with React, use the ",Object(l.b)("inlineCode",{parentName:"p"},"useContentfulEntry")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{}),"import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [entry, loading, error] = useContentfulEntry(ENTRY_ID)\n\n  if (error) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(error.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {loading && \"Loading...\"}\n      {entry && JSON.stringify(entry)}\n  )\n}\n")),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"To fetch only drafts, set ",Object(l.b)("inlineCode",{parentName:"em"},"preview")," to true in the ","[options]","(TODO: API DOCS).")),Object(l.b)("h2",null,"Fetching Many Entries"),Object(l.b)("p",null,"You can fetch all entries in the space, or search for entries by providing a query object with ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters/order"}),"search parameters"),":"),Object(l.b)("h3",null,"Vanilla JS"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{}),"const cms = new TinaCMS(...)\n\n// Get all entries\ncms.api.contentful.getEntries()\n  .then(allEntries => console.log(allEntries))\n\n// Search for entries\ncms.api.contentful.getEntries({\n  content_type: 'post',\n  order: 'sys.createdAt'\n})\n  .then(posts => console.log(posts))\n")),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"To fetch only drafts, set ",Object(l.b)("inlineCode",{parentName:"em"},"preview")," to true in the ","[options]","(TODO: API DOCS).")),Object(l.b)("h3",null,"React"),Object(l.b)("p",null,"To fetch an entry with React, use the ",Object(l.b)("inlineCode",{parentName:"p"},"useContentfulEntry")," hook:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{}),"import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [allEntries, allLoading, errorA] = useContenfulEntries()\n  const [posts, postsLoading, errorB] = useContentfulEntries({\n    content_type: 'post',\n    order: 'sys.createdAt'\n  })\n\n  if (errorA || error B) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(errorA.message || errorB.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <ol>\n        {allLoading && \"Loading...\"}\n        {allEntries && allEntries.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n      <ol>\n        {postsLoading && \"Loading...\"}\n        {posts && posts.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n  )\n}\n")),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"To fetch only drafts, set ",Object(l.b)("inlineCode",{parentName:"em"},"preview")," to true in the ","[options]","(TODO: API DOCS).")))}i.isMDXComponent=!0}}]);