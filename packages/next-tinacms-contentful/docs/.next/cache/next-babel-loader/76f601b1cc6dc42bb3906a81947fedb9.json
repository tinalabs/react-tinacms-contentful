{"ast":null,"code":"var _jsxFileName = \"/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/fetching-entries.mdx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, `Fetching Entries`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, `In this guide, we'll cover how to fetch entries with `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 65\n    }\n  }, `react-tinacms-contentful`), `.`), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, `Fetching An Entry`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, `You can fetch any entry in the space by ID.`), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, `Vanilla JS`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, `To fetch an entry with Vanilla JS, use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 55\n    }\n  }, `cms.api`), ` object.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }), `const cms = new TinaCMS(...)\n\ncms.api.contentful.getEntry(\"ENTRY_ID\")\n  .then(entry => console.log(entry))\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 8\n    }\n  }, `To fetch only drafts, set `, mdx(\"inlineCode\", {\n    parentName: \"em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 57\n    }\n  }, `preview`), ` to true in the `, `[options]`, `(TODO: API DOCS).`)), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, `React`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, `To fetch an entry with React, use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 50\n    }\n  }, `useContentfulEntry`), ` hook:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }), `import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [entry, loading, error] = useContentfulEntry(ENTRY_ID)\n\n  if (error) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(error.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {loading && \"Loading...\"}\n      {entry && JSON.stringify(entry)}\n  )\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 8\n    }\n  }, `To fetch only drafts, set `, mdx(\"inlineCode\", {\n    parentName: \"em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 57\n    }\n  }, `preview`), ` to true in the `, `[options]`, `(TODO: API DOCS).`)), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, `Fetching Many Entries`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, `You can fetch all entries in the space, or search for entries by providing a query object with `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters/order\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 107\n    }\n  }), `search parameters`), `:`), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, `Vanilla JS`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  }), `const cms = new TinaCMS(...)\n\n// Get all entries\ncms.api.contentful.getEntries()\n  .then(allEntries => console.log(allEntries))\n\n// Search for entries\ncms.api.contentful.getEntries({\n  content_type: 'post',\n  order: 'sys.createdAt'\n})\n  .then(posts => console.log(posts))\n`)), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, `React`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, `To fetch an entry with React, use the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 50\n    }\n  }, `useContentfulEntry`), ` hook:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  }), `import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [allEntries, allLoading, errorA] = useContenfulEntries()\n  const [posts, postsLoading, errorB] = useContentfulEntries({\n    content_type: 'post',\n    order: 'sys.createdAt'\n  })\n\n  if (errorA || error B) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(errorA.message || errorB.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <ol>\n        {allLoading && \"Loading...\"}\n        {allEntries && allEntries.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n      <ol>\n        {postsLoading && \"Loading...\"}\n        {posts && posts.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n  )\n}\n`)), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, `Fetching preview entries`));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/fetching-entries.mdx"],"names":["React","mdx","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Fetching Entries`}</h1>\n    <p>{`In this guide, we'll cover how to fetch entries with `}<inlineCode parentName=\"p\">{`react-tinacms-contentful`}</inlineCode>{`.`}</p>\n    <h2>{`Fetching An Entry`}</h2>\n    <p>{`You can fetch any entry in the space by ID.`}</p>\n    <h3>{`Vanilla JS`}</h3>\n    <p>{`To fetch an entry with Vanilla JS, use the `}<inlineCode parentName=\"p\">{`cms.api`}</inlineCode>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const cms = new TinaCMS(...)\n\ncms.api.contentful.getEntry(\"ENTRY_ID\")\n  .then(entry => console.log(entry))\n`}</code></pre>\n    <p><em parentName=\"p\">{`To fetch only drafts, set `}<inlineCode parentName=\"em\">{`preview`}</inlineCode>{` to true in the `}{`[options]`}{`(TODO: API DOCS).`}</em></p>\n    <h3>{`React`}</h3>\n    <p>{`To fetch an entry with React, use the `}<inlineCode parentName=\"p\">{`useContentfulEntry`}</inlineCode>{` hook:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [entry, loading, error] = useContentfulEntry(ENTRY_ID)\n\n  if (error) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(error.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {loading && \"Loading...\"}\n      {entry && JSON.stringify(entry)}\n  )\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`To fetch only drafts, set `}<inlineCode parentName=\"em\">{`preview`}</inlineCode>{` to true in the `}{`[options]`}{`(TODO: API DOCS).`}</em></p>\n    <h2>{`Fetching Many Entries`}</h2>\n    <p>{`You can fetch all entries in the space, or search for entries by providing a query object with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters/order\"\n      }}>{`search parameters`}</a>{`:`}</p>\n    <h3>{`Vanilla JS`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`const cms = new TinaCMS(...)\n\n// Get all entries\ncms.api.contentful.getEntries()\n  .then(allEntries => console.log(allEntries))\n\n// Search for entries\ncms.api.contentful.getEntries({\n  content_type: 'post',\n  order: 'sys.createdAt'\n})\n  .then(posts => console.log(posts))\n`}</code></pre>\n    <h3>{`React`}</h3>\n    <p>{`To fetch an entry with React, use the `}<inlineCode parentName=\"p\">{`useContentfulEntry`}</inlineCode>{` hook:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { useContentfulEntry } from 'react-tinacms-contentful'\n\nexport const Example () => {\n  const [allEntries, allLoading, errorA] = useContenfulEntries()\n  const [posts, postsLoading, errorB] = useContentfulEntries({\n    content_type: 'post',\n    order: 'sys.createdAt'\n  })\n\n  if (errorA || error B) {\n    return (\n      <>\n        <h2>Something went wrong...</h2>\n        <pre>\n          <code>{JSON.stringify(errorA.message || errorB.message)}</code>\n        </pre>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <ol>\n        {allLoading && \"Loading...\"}\n        {allEntries && allEntries.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n      <ol>\n        {postsLoading && \"Loading...\"}\n        {posts && posts.map(entry => <li>{JSON.stringify(entry)})}</li>)}\n      </ol>\n  )\n}\n`}</code></pre>\n    <h3>{`Fetching preview entries`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}