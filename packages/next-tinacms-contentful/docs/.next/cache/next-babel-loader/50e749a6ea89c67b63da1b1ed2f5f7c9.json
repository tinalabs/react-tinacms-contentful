{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/3-editing-entries.mdx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, \"Editing Entries\"), mdx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"In this guide, we'll cover how to edit entries with \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 64\n    }\n  }, \"react-tinacms-contentful\"), \". There is also a list of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#faqs\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 162\n    }\n  }), \"Frequently Asked Questions (FAQs)\"), \".\"), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, \"Editing A Single Entry\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, \"Editing a single entry can be done via the \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 55\n    }\n  }, \"useContentfulEntryForm\"), \" hook.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, \"Fetch an entry and pass it to \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 42\n    }\n  }, \"useContentfulEntryForm\"), \", and you will receive a \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 137\n    }\n  }, \"modifiedEntry\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 203\n    }\n  }, \"form\"), \" object.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }), \"export function Page() {\\n  const [entry, loading, error] = useContentfulEntry(entryId);\\n  const [modifiedEntry, form] = useContentfulEntryForm(entry);\\n\\n  if (error) {\\n    return <div>Error: {error.message}</div>\\n  }\\n\\n  return (\\n    <main>\\n      {loading && \\\"Loading...\\\"}\\n      {entry && entry.fields.title}\\n    </main>\\n  )\\n}\\n\")), mdx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, mdx(\"thead\", {\n    parentName: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, mdx(\"tr\", {\n    parentName: \"thead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), \"name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }), \"description\"))), mdx(\"tbody\", {\n    parentName: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, mdx(\"tr\", {\n    parentName: \"tbody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }\n  }, \"modifiedEntry\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), \"The entry data returned from the form, to re-render the page with draft form data\")), mdx(\"tr\", {\n    parentName: \"tbody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 14\n    }\n  }, \"form\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), \"A TinaCMS \", mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 28\n    }\n  }, \"Form\"), \" object to be used with \", mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 105\n    }\n  }, \"usePlugin\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 167\n    }\n  }, \"InlineForm\"))))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"You can also pass \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/#form-configuration\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 30\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }\n  }, \"FormOptions\")), \" to the hook to further customize the form:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }), \"export function Page() {\\n  const [entry, loading, error] = useContentfulEntry(entryId);\\n-  const [modifiedEntry, form] = useContentfulEntryForm(entry);\\n+  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\\n+    id: \\\"page\\\",\\n+    onChange: (values) => console.log(values)\\n+  });\\n\\n  if (error) {\\n    return <div>Error: {error.message}</div>\\n  }\\n\\n  return (\\n    <main>\\n      {loading && \\\"Loading...\\\"}\\n      {entry && entry.fields.title}\\n    </main>\\n  )\\n}\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, \"Finally, you can also create a custom form altogether if you need full control:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 10\n    }\n  }), \"export function Page() {\\n  const contentful = useContentful();\\n  const [entry, loading, error] = useContentfulEntry(entryId);\\n  const [modifiedEntry, form] = useForm({\\n    id: \\\"page\\\",\\n    onChange: (values) => console.log(values),\\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\\n  });\\n\\n  if (error) {\\n    return <div>Error: {error.message}</div>\\n  }\\n\\n  return (\\n    <main>\\n      {loading && \\\"Loading...\\\"}\\n      {entry && entry.fields.title}\\n    </main>\\n  )\\n}\\n\")), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, mdx(\"h3\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Pro Tips\"), mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"See the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 46\n    }\n  }), \"TinaCMS form documentation for more info\"), \".\\nSee the API documentation for \", \"[\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 38\n    }\n  }, \"useContentful\"), \"]\", \" and \", \"[\", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 114\n    }\n  }, \"useContentfulEntry\"), \"]\", \".\")), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, \"Editing Referenced Entries\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, \"You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, \"This is done by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 36\n    }\n  }, \"references: true\"), \" in the form's options.\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 10\n    }\n  }), \"export function Page() {\\n  const contentful = useContentful();\\n  const [entry, loading, error] = useContentfulEntry(entryId);\\n  const [modifiedEntry, form] = useForm({\\n    id: \\\"page\\\",\\n    onChange: (values) => console.log(values),\\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\\n+   references: true \\n  });\\n\\n  if (error) {\\n    return <div>Error: {error.message}</div>\\n  }\\n\\n  return (\\n    <main>\\n      {loading && \\\"Loading...\\\"}\\n      {entry && entry.fields.title}\\n    </main>\\n  )\\n}\\n\")), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, \"explain useContentfulEntryForm with { references: true }\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"explain cms.api.updateEntry\"), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, \"expain cms.api.updateEntries\")), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, \"FAQs\"), mdx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"What happens on write?\", mdx(\"blockquote\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\\nHowever, if you're looking to update an entry and its children, then see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 76\n    }\n  }), \"Editing Nested & Referenced Entries\")))), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"What happens to references?\", mdx(\"ul\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, \"See \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 39\n    }\n  }), \"Editing Nested & Referenced Entries\")))), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  })));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/3-editing-entries.mdx"],"names":["React","mdx","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Editing Entries`}</h1>\n    <hr></hr>\n    <p>{`In this guide, we'll cover how to edit entries with `}<inlineCode parentName=\"p\">{`react-tinacms-contentful`}</inlineCode>{`. There is also a list of `}<a parentName=\"p\" {...{\n        \"href\": \"#faqs\"\n      }}>{`Frequently Asked Questions (FAQs)`}</a>{`.`}</p>\n    <h2>{`Editing A Single Entry`}</h2>\n    <p>{`Editing a single entry can be done via the `}<inlineCode parentName=\"p\">{`useContentfulEntryForm`}</inlineCode>{` hook.`}</p>\n    <p>{`Fetch an entry and pass it to `}<inlineCode parentName=\"p\">{`useContentfulEntryForm`}</inlineCode>{`, and you will receive a `}<inlineCode parentName=\"p\">{`modifiedEntry`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`form`}</inlineCode>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry);\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`modifiedEntry`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The entry data returned from the form, to re-render the page with draft form data`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`form`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A TinaCMS `}<inlineCode parentName=\"td\">{`Form`}</inlineCode>{` object to be used with `}<inlineCode parentName=\"td\">{`usePlugin`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`InlineForm`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`You can also pass `}<a parentName=\"p\" {...{\n        \"href\": \"https://tina.io/docs/plugins/forms/#form-configuration\"\n      }}><inlineCode parentName=\"a\">{`FormOptions`}</inlineCode></a>{` to the hook to further customize the form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n-  const [modifiedEntry, form] = useContentfulEntryForm(entry);\n+  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n+    id: \"page\",\n+    onChange: (values) => console.log(values)\n+  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <p>{`Finally, you can also create a custom form altogether if you need full control:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <blockquote>\n      <h3 parentName=\"blockquote\">{`Pro Tips`}</h3>\n      <p parentName=\"blockquote\">{`See the `}<a parentName=\"p\" {...{\n          \"href\": \"https://tina.io/docs/plugins/forms/\"\n        }}>{`TinaCMS form documentation for more info`}</a>{`.\nSee the API documentation for `}{`[`}<inlineCode parentName=\"p\">{`useContentful`}</inlineCode>{`]`}{` and `}{`[`}<inlineCode parentName=\"p\">{`useContentfulEntry`}</inlineCode>{`]`}{`.`}</p>\n    </blockquote>\n    <h2>{`Editing Referenced Entries`}</h2>\n    <p>{`You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting.`}</p>\n    <p>{`This is done by passing `}<inlineCode parentName=\"p\">{`references: true`}</inlineCode>{` in the form's options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n+   references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`explain useContentfulEntryForm with { references: true }`}</li>\n      <li parentName=\"ul\">{`explain cms.api.updateEntry`}</li>\n      <li parentName=\"ul\">{`expain cms.api.updateEntries`}</li>\n    </ul>\n    <h2>{`FAQs`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`What happens on write?`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\nHowever, if you're looking to update an entry and its children, then see `}<a parentName=\"p\" {...{\n              \"href\": \"#editing-nested-referenced-entries\"\n            }}>{`Editing Nested & Referenced Entries`}</a></p>\n        </blockquote>\n      </li>\n      <li parentName=\"ol\">{`What happens to references?`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#editing-nested-referenced-entries\"\n            }}>{`Editing Nested & Referenced Entries`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\"></li>\n    </ol>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}