{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `Using Contentful in TinaCMS Plugins`), mdx(\"hr\", null), mdx(\"p\", null, `To use Contentful in `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/\"\n  }), `TinaCMS plugins`), `, you can either use the `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#cms-api\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `cms.api`)), ` object, or the `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#react-utility-hooks\"\n  }), `react utility hooks`), `.`), mdx(\"h2\", null, `CMS API`), mdx(\"p\", null, `Inside various plugins types you will be given access to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `cms`), ` object. You can access the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ContentfulAPIClient`), ` from this. For example, in a `, `[content creator plugin]`, `)():`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), `const PostCreatorPlugin = {\n  __type: 'content-creator',\n  fields: [\n    { name: \"fields.title\", label: \"Title\", component: \"text\" }\n  ],\n  onSubmit: aysnc(values, cms) {\n    try {\n      await cms.api.contentful.createEntry(values.fields)\n\n      cms.alerts.success(\"Created entry\")\n    }\n    catch (error) {\n      cms.alerts.error(error.message)\n    }\n`)), mdx(\"h2\", null, `React Utility Hooks`), mdx(\"p\", null, `There are a variety of React utility hooks for interacting with Contentful:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `useContentful`), `: returns the `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `ContentfulAPIClient`), ` instance`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `useContentfulDelivery`), `: returns an instance of the Contentful JS SDK to retreive drafts from the delivery API.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `useContentfulPreview`), `: returns an instance of the Contentful JS SDK to retreive drafts from the preview API.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `useContentfulPreview`), `: returns an instance of the Contentful JS SDK to retreive drafts from the preview API.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `useContentfulManagement`), `: returns an instance of the Contentful Management API for the current logged in Contentful user.`, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Note:`), ` do not use this in contexts where the CMS is not enabled and a user is not logged in.`)))));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}