{"ast":null,"code":"var _jsxFileName = \"/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/3-editing-entries.mdx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, `Editing Entries`), mdx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, `In this guide, we'll cover how to edit entries with `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 64\n    }\n  }, `react-tinacms-contentful`), `. There is also a list of `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#faqs\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 162\n    }\n  }), `Frequently Asked Questions (FAQs)`), `.`), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, `Editing A Single Entry`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, `Editing a single entry can be done via the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 55\n    }\n  }, `useContentfulEntryForm`), ` hook.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, `Fetch an entry and pass it to `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 42\n    }\n  }, `useContentfulEntryForm`), `, and you will receive a `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 137\n    }\n  }, `modifiedEntry`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 203\n    }\n  }, `form`), ` object.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }), `export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, mdx(\"thead\", {\n    parentName: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, mdx(\"tr\", {\n    parentName: \"thead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), `name`), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), `description`))), mdx(\"tbody\", {\n    parentName: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, mdx(\"tr\", {\n    parentName: \"tbody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }\n  }, `modifiedEntry`)), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), `The entry data returned from the form, to re-render the page with draft form data`)), mdx(\"tr\", {\n    parentName: \"tbody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 14\n    }\n  }, `form`)), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), `A TinaCMS `, mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 28\n    }\n  }, `Form`), ` object to be used with `, mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 105\n    }\n  }, `usePlugin`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"td\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 167\n    }\n  }, `InlineForm`))))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, `You can also pass `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/#form-configuration\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 30\n    }\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }, `FormOptions`)), ` to the hook to further customize the form:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }\n  }), `export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n+   id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n+   onChange: (values) => console.log(values)\n+ });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, `Finally, you can also create a custom form altogether if you need full control:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }), `export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"title\", label: \"Title\", component: \"text\" }\n    ],\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, mdx(\"h3\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, `Pro Tips`), mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, `See the `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 46\n    }\n  }), `TinaCMS form documentation for more info`), `.\nSee the API documentation for `, `[`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 38\n    }\n  }, `useContentful`), `]`, ` and `, `[`, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 114\n    }\n  }, `useContentfulEntry`), `]`, `.`)), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, `Editing Referenced Entries`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, `You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, `This is done by passing `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 36\n    }\n  }, `references: true`), ` in the form's options.`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }\n  }), `export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"title\", label: \"Title\", component: \"text\" }\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n+   references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, `This will then allow the form fields to edit the fields of references. For example, if we had a post content type:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 10\n    }\n  }), `type PostEntry {\n  title: string\n  created: Date\n  edited: Date\n  author: AuthorEntry\n}\n\ntype AuthorEntry {\n  firstName: string\n  lastName: string\n  bio: string\n  photo: Asset\n}\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, `We can edit the `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 28\n    }\n  }, `author`), ` and the author's `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 100\n    }\n  }, `photo`), ` by setting up form fields to access them:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 10\n    }\n  }), ``)), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, `explain useContentfulEntryForm with { references: true }`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, `explain cms.api.updateEntry`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, `expain cms.api.updateEntries`)), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, `FAQs`), mdx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, `What happens on write?`, mdx(\"blockquote\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, `That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\nHowever, if you're looking to update an entry and its children, then see `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 76\n    }\n  }), `Editing Nested & Referenced Entries`)))), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, `What happens to references?`, mdx(\"ul\", {\n    parentName: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, `See `, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 39\n    }\n  }), `Editing Nested & Referenced Entries`)))), mdx(\"li\", {\n    parentName: \"ol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/christophermacrae/Code/tinalabs/react-tinacms-contentful/packages/docs/content/3-editing-entries.mdx"],"names":["React","mdx","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Editing Entries`}</h1>\n    <hr></hr>\n    <p>{`In this guide, we'll cover how to edit entries with `}<inlineCode parentName=\"p\">{`react-tinacms-contentful`}</inlineCode>{`. There is also a list of `}<a parentName=\"p\" {...{\n        \"href\": \"#faqs\"\n      }}>{`Frequently Asked Questions (FAQs)`}</a>{`.`}</p>\n    <h2>{`Editing A Single Entry`}</h2>\n    <p>{`Editing a single entry can be done via the `}<inlineCode parentName=\"p\">{`useContentfulEntryForm`}</inlineCode>{` hook.`}</p>\n    <p>{`Fetch an entry and pass it to `}<inlineCode parentName=\"p\">{`useContentfulEntryForm`}</inlineCode>{`, and you will receive a `}<inlineCode parentName=\"p\">{`modifiedEntry`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`form`}</inlineCode>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`modifiedEntry`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The entry data returned from the form, to re-render the page with draft form data`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`form`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A TinaCMS `}<inlineCode parentName=\"td\">{`Form`}</inlineCode>{` object to be used with `}<inlineCode parentName=\"td\">{`usePlugin`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`InlineForm`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`You can also pass `}<a parentName=\"p\" {...{\n        \"href\": \"https://tina.io/docs/plugins/forms/#form-configuration\"\n      }}><inlineCode parentName=\"a\">{`FormOptions`}</inlineCode></a>{` to the hook to further customize the form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n+   id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n+   onChange: (values) => console.log(values)\n+ });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <p>{`Finally, you can also create a custom form altogether if you need full control:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"title\", label: \"Title\", component: \"text\" }\n    ],\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <blockquote>\n      <h3 parentName=\"blockquote\">{`Pro Tips`}</h3>\n      <p parentName=\"blockquote\">{`See the `}<a parentName=\"p\" {...{\n          \"href\": \"https://tina.io/docs/plugins/forms/\"\n        }}>{`TinaCMS form documentation for more info`}</a>{`.\nSee the API documentation for `}{`[`}<inlineCode parentName=\"p\">{`useContentful`}</inlineCode>{`]`}{` and `}{`[`}<inlineCode parentName=\"p\">{`useContentfulEntry`}</inlineCode>{`]`}{`.`}</p>\n    </blockquote>\n    <h2>{`Editing Referenced Entries`}</h2>\n    <p>{`You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting.`}</p>\n    <p>{`This is done by passing `}<inlineCode parentName=\"p\">{`references: true`}</inlineCode>{` in the form's options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"title\", label: \"Title\", component: \"text\" }\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n+   references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`}</code></pre>\n    <p>{`This will then allow the form fields to edit the fields of references. For example, if we had a post content type:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type PostEntry {\n  title: string\n  created: Date\n  edited: Date\n  author: AuthorEntry\n}\n\ntype AuthorEntry {\n  firstName: string\n  lastName: string\n  bio: string\n  photo: Asset\n}\n`}</code></pre>\n    <p>{`We can edit the `}<inlineCode parentName=\"p\">{`author`}</inlineCode>{` and the author's `}<inlineCode parentName=\"p\">{`photo`}</inlineCode>{` by setting up form fields to access them:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{``}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`explain useContentfulEntryForm with { references: true }`}</li>\n      <li parentName=\"ul\">{`explain cms.api.updateEntry`}</li>\n      <li parentName=\"ul\">{`expain cms.api.updateEntries`}</li>\n    </ul>\n    <h2>{`FAQs`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`What happens on write?`}\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\nHowever, if you're looking to update an entry and its children, then see `}<a parentName=\"p\" {...{\n              \"href\": \"#editing-nested-referenced-entries\"\n            }}>{`Editing Nested & Referenced Entries`}</a></p>\n        </blockquote>\n      </li>\n      <li parentName=\"ol\">{`What happens to references?`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#editing-nested-referenced-entries\"\n            }}>{`Editing Nested & Referenced Entries`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\"></li>\n    </ol>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}