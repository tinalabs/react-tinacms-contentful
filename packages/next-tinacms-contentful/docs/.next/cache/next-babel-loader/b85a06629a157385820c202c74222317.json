{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `Editing Entries`), mdx(\"hr\", null), mdx(\"p\", null, `On this page, we'll cover how to edit entries with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `react-tinacms-contentful`), `. There is also a list of `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#faqs\"\n  }), `Frequently Asked Questions (FAQs)`), `.`), mdx(\"h2\", null, `Editing A Single Entry`), mdx(\"p\", null, `Editing a single entry can be done via the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useContentfulEntryForm`), ` hook.`), mdx(\"p\", null, `Fetch an entry and pass it to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useContentfulEntryForm`), `, and you will receive a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `modifiedEntry`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `form`), ` object.`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), `export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), `name`), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), `description`))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `modifiedEntry`)), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), `The entry data returned from the form, to re-render the page with draft form data`)), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `form`)), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), `A TinaCMS `, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `Form`), ` object to be used with `, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `usePlugin`), ` or `, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, `InlineForm`))))), mdx(\"p\", null, `You can also pass `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/#form-configuration\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, `FormOptions`)), ` to the hook to further customize the form:`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), `export function Page() {\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useContentfulEntryForm(entry, {\n+   id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n+   onChange: (values) => console.log(values)\n+ });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"p\", null, `Finally, you can also create a custom form altogether if you need full control:`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), `export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ],\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values)\n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"blockquote\", null, mdx(\"h3\", {\n    parentName: \"blockquote\"\n  }, `Pro Tips`), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, `See the `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tina.io/docs/plugins/forms/\"\n  }), `TinaCMS form documentation for more info`), `.\nSee the API documentation for `, `[`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useContentful`), `]`, ` and `, `[`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useContentfulEntry`), `]`, `.`)), mdx(\"h2\", null, `Editing Referenced Entries`), mdx(\"p\", null, `You can also create a form that will edit an entry and allow editing of its children, up to 10 levels of nesting.`), mdx(\"p\", null, `This is done by passing `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `references: true`), ` in the form's options.`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), `export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" }\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n+   references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"p\", null, `This will then allow the form fields to edit the fields of references. For example, if we had a post content type:`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), `type PostEntry {\n  title: string\n  created: Date\n  edited: Date\n  author: AuthorEntry\n}\n\ntype AuthorEntry {\n  firstName: string\n  lastName: string\n  bio: string\n  photo: Asset\n}\n`)), mdx(\"p\", null, `We can edit the the author data by setting up form fields to access them:`), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), `export function Page() {\n  const contentful = useContentful();\n  const [entry, loading, error] = useContentfulEntry(entryId);\n  const [modifiedEntry, form] = useForm({\n    id: \"page\",\n    fields: [\n      { name: \"fields.title\", label: \"Title\", component: \"text\" },\n      { name: \"fields.author\", label: \"Author\", component: \"group\", fields: [\n        { name: \"fields.firstName\", label: \"First Name\", component: \"text\" },\n        { name: \"fields.lastName\", label: \"First Name\", component: \"text\" },\n        { name: \"fields.bio\", label: \"Bio\", label: \"Keep it short. 250 words or less\", component: \"textarea\" },\n        { name: \"fields.photo\", label: \"Photo\", component: \"image\" }\n      ]}\n    ]\n    onChange: (values) => console.log(values),\n    onSubmit: (values) => contentful.updateEntry(entryId, values),\n    references: true \n  });\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  }\n\n  return (\n    <main>\n      {loading && \"Loading...\"}\n      {entry && entry.fields.title}\n    </main>\n  )\n}\n`)), mdx(\"p\", null, `If the entry being edited already has an author, then you'll be able to update that author, otherwise, it will create a new author.`), mdx(\"h2\", null, `FAQs`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `What happens on write?`, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, `That depends. If you're looking to write back a single entry, then write back updates only the fields on that entry, and none of its relationships.\nHowever, if you're looking to update an entry and its children, then see `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }), `Editing Nested & Referenced Entries`)))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `What happens to references?`, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, `See `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#editing-nested-referenced-entries\"\n  }), `Editing Nested & Referenced Entries`))))));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}