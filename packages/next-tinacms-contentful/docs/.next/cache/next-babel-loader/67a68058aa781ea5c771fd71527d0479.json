{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Fetching Entries\"), mdx(\"p\", null, \"In this guide, we'll cover how to fetch entries with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-tinacms-contentful\"), \".\"), mdx(\"h2\", null, \"Fetching An Entry\"), mdx(\"p\", null, \"You can fetch any entry in the space by ID.\"), mdx(\"h3\", null, \"Vanilla JS\"), mdx(\"p\", null, \"To fetch an entry with Vanilla JS, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cms.api\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const cms = new TinaCMS(...)\\n\\ncms.api.contentful.getEntry(\\\"ENTRY_ID\\\")\\n  .then(entry => console.log(entry))\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To fetch only drafts, set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"preview\"), \" to true in the \", \"[options]\", \"(TODO: API DOCS).\")), mdx(\"h3\", null, \"React\"), mdx(\"p\", null, \"To fetch an entry with React, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContentfulEntry\"), \" hook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { useContentfulEntry } from 'react-tinacms-contentful'\\n\\nexport const Example () => {\\n  const [entry, loading, error] = useContentfulEntry(ENTRY_ID)\\n\\n  if (error) {\\n    return (\\n      <>\\n        <h2>Something went wrong...</h2>\\n        <pre>\\n          <code>{JSON.stringify(error.message)}</code>\\n        </pre>\\n      </>\\n    )\\n  }\\n\\n  return (\\n    <>\\n      {loading && \\\"Loading...\\\"}\\n      {entry && JSON.stringify(entry)}\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To fetch only drafts, set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"preview\"), \" to true in the \", \"[options]\", \"(TODO: API DOCS).\")), mdx(\"h2\", null, \"Fetching Many Entries\"), mdx(\"p\", null, \"You can fetch all entries in the space, or search for entries by providing a query object with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters/order\"\n  }), \"search parameters\"), \":\"), mdx(\"h3\", null, \"Vanilla JS\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const cms = new TinaCMS(...)\\n\\n// Get all entries\\ncms.api.contentful.getEntries()\\n  .then(allEntries => console.log(allEntries))\\n\\n// Search for entries\\ncms.api.contentful.getEntries({\\n  content_type: 'post',\\n  order: 'sys.createdAt'\\n})\\n  .then(posts => console.log(posts))\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To fetch only drafts, set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"preview\"), \" to true in the \", \"[options]\", \"(TODO: API DOCS).\")), mdx(\"h3\", null, \"React\"), mdx(\"p\", null, \"To fetch an entry with React, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContentfulEntry\"), \" hook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { useContentfulEntry } from 'react-tinacms-contentful'\\n\\nexport const Example () => {\\n  const [allEntries, allLoading, errorA] = useContenfulEntries()\\n  const [posts, postsLoading, errorB] = useContentfulEntries({\\n    content_type: 'post',\\n    order: 'sys.createdAt'\\n  })\\n\\n  if (errorA || error B) {\\n    return (\\n      <>\\n        <h2>Something went wrong...</h2>\\n        <pre>\\n          <code>{JSON.stringify(errorA.message || errorB.message)}</code>\\n        </pre>\\n      </>\\n    )\\n  }\\n\\n  return (\\n    <>\\n      <ol>\\n        {allLoading && \\\"Loading...\\\"}\\n        {allEntries && allEntries.map(entry => <li>{JSON.stringify(entry)})}</li>)}\\n      </ol>\\n      <ol>\\n        {postsLoading && \\\"Loading...\\\"}\\n        {posts && posts.map(entry => <li>{JSON.stringify(entry)})}</li>)}\\n      </ol>\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"To fetch only drafts, set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"preview\"), \" to true in the \", \"[options]\", \"(TODO: API DOCS).\")));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}